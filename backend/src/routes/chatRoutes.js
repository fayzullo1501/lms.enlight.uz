const express = require("express");
const Chat = require("../models/Chat");
const Course = require("../models/Course");
const User = require("../models/User");

const router = express.Router();

// üìå 1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –∫—É—Ä—Å–∞
router.post("/:courseId/messages", async (req, res) => {
  try {
    const { sender, message } = req.body;
    const { courseId } = req.params;

    if (!sender || !message) {
      return res.status(400).json({ message: "‚ùå –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!" });
    }

    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({ message: "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    const newMessage = new Chat({ course: courseId, sender, message });
    await newMessage.save();

    res.status(201).json({ message: "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", chat: newMessage });
  } catch (error) {
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è!", error });
  }
});

// üìå 2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –∫—É—Ä—Å–∞
router.get("/:courseId/messages", async (req, res) => {
  try {
    const { courseId } = req.params;

    const messages = await Chat.find({ course: courseId })
      .populate("sender", "fullName role") // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      .sort({ timestamp: 1 }); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ

    res.json(messages);
  } catch (error) {
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π!", error });
  }
});

// üìå 3Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
router.delete("/:courseId/messages/:messageId", async (req, res) => {
  try {
    const { courseId, messageId } = req.params;

    const message = await Chat.findById(messageId);
    if (!message) {
      return res.status(404).json({ message: "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!" });
    }

    await Chat.findByIdAndDelete(messageId);
    res.json({ message: "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!" });
  } catch (error) {
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!", error });
  }
});

module.exports = router;
