const express = require("express");
const multer = require("multer");
const Course = require("../models/Course");

const router = express.Router();

// üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ `multer` (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞ –∫—É—Ä—Å–∞, –∏ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤)
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "uploads/"); // –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ `uploads/`
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}_${file.originalname}`); // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
  },
});

const upload = multer({ storage });

// üìå 1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞ (–ê–¥–º–∏–Ω)
router.post("/", upload.single("banner"), async (req, res) => {
  try {
    const { title, description, language, duration, format, mentor } = req.body;

    if (!title || !description || !language || !duration || !format || !mentor) {
      return res.status(400).json({ message: "‚ùå –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!" });
    }

    const newCourse = new Course({
      title,
      description,
      language,
      duration,
      format,
      banner: req.file ? `uploads/${req.file.filename}` : "uploads/default-banner.jpg",
      mentor,
    });

    await newCourse.save();
    res.status(201).json({ message: "‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", course: newCourse });
  } catch (error) {
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞!", error });
  }
});

// üìå 2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤
router.get("/", async (req, res) => {
  try {
    const courses = await Course.find().populate("mentor", "fullName");
    res.json(courses);
  } catch (error) {
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤!" });
  }
});

// üìå 3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –ø–æ ID
router.get("/:id", async (req, res) => {
  try {
    const course = await Course.findById(req.params.id).populate("mentor students");
    if (!course) return res.status(404).json({ message: "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    res.json(course);
  } catch (error) {
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
  }
});

// üìå 4Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞
router.delete("/:id", async (req, res) => {
  try {
    const deletedCourse = await Course.findByIdAndDelete(req.params.id);
    if (!deletedCourse) return res.status(404).json({ message: "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });

    res.json({ message: "‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!" });
  } catch (error) {
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞!" });
  }
});

// üìå 5Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞
router.put("/:id", upload.single("banner"), async (req, res) => {
  try {
    console.log("üìå –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞:", req.body); // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞

    const { title, description, language, duration, format, mentor } = req.body;
    const courseId = req.params.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫—É—Ä—Å
    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({ message: "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞
    course.title = title || course.title;
    course.description = description || course.description;
    course.language = language || course.language;
    course.duration = duration || course.duration;
    course.format = format || course.format;
    course.mentor = mentor || course.mentor;

    // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä, –æ–±–Ω–æ–≤–ª—è–µ–º
    if (req.file) {
      course.banner = `uploads/${req.file.filename}`;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await course.save();
    res.json({ message: "‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", course });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞:", error);
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞!", error });
  }
});

// üìå 6Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞
router.delete("/:id", async (req, res) => {
  try {
    const courseId = req.params.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫—É—Ä—Å
    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({ message: "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    // –£–¥–∞–ª—è–µ–º –∫—É—Ä—Å
    await Course.findByIdAndDelete(courseId);
    res.json({ message: "‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!" });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞:", error);
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞!", error });
  }
});

// üìå 7Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞
router.get("/mentor/:mentorId", async (req, res) => {
  try {
    const mentorId = req.params.mentorId;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω teacher
    const courses = await Course.find({ mentor: mentorId }).populate("mentor", "fullName");
    
    if (!courses.length) {
      return res.status(404).json({ message: "‚ùå –£ —ç—Ç–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤!" });
    }

    res.json(courses);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –º–µ–Ω—Ç–æ—Ä–∞:", error);
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
  }
});

// üìå 8Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –≤ –∫—É—Ä—Å (—Å —É—á–µ—Ç–æ–º —Ñ–∞–π–ª–æ–≤)
router.post("/:id/lessons", upload.fields([{ name: "banner", maxCount: 1 }, { name: "material", maxCount: 1 }]), async (req, res) => {
  try {
    console.log("üìå –î–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:", req.body);
    console.log("üìå –§–∞–π–ª—ã:", req.files);

    const { title, description, date, duration, conferenceLink } = req.body;
    const courseId = req.params.id;

    if (!title || !description || !date || !duration) {
      return res.status(400).json({ message: "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!" });
    }

    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({ message: "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    // ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
    const newLesson = {
      title,
      description,
      date,
      duration,
      banner: req.files["banner"] ? `uploads/${req.files["banner"][0].filename}` : "",
      conferenceLink,
      mentor: course.mentor || null,
      materials: []
    };

    // ‚úÖ –ï—Å–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –º–∞—Ç–µ—Ä–∏–∞–ª, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if (req.files["material"] && req.files["material"].length > 0) {
      const uploadedFile = req.files["material"][0];
      newLesson.materials.push({
        title: uploadedFile.originalname, // ‚úÖ –ë–µ—Ä–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∫–∞–∫ title
        fileName: uploadedFile.originalname,
        fileUrl: `uploads/${uploadedFile.filename}`,
        fileType: "file" // ‚úÖ –¢–µ–ø–µ—Ä—å —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º "file", –∞ –Ω–µ MIME-—Ç–∏–ø
      });
    }

    console.log("üìå –ù–æ–≤—ã–π —É—Ä–æ–∫:", newLesson);

    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫ –≤ –∫—É—Ä—Å
    course.lessons.push(newLesson);
    await course.save();

    res.json({ message: "‚úÖ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", lessons: course.lessons });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:", error);
    res.status(500).json({ message: "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
});


// üìå 9Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –∏–∑ –∫—É—Ä—Å–∞
router.delete("/:id/lessons/:lessonId", async (req, res) => {
  try {
    const { id, lessonId } = req.params;

    const course = await Course.findById(id);
    if (!course) {
      return res.status(404).json({ message: "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    const updatedLessons = course.lessons.filter(lesson => lesson._id.toString() !== lessonId);

    if (updatedLessons.length === course.lessons.length) {
      return res.status(404).json({ message: "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    course.lessons = updatedLessons;
    await course.save();

    res.json({ message: "‚úÖ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!", lessons: course.lessons });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:", error);
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
  }
});

// üìå üîü –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ –∫—É—Ä—Å–∞
router.get("/:id/lessons", async (req, res) => {
  try {
    const course = await Course.findById(req.params.id);
    if (!course) {
      return res.status(404).json({ message: "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    if (!course.lessons || course.lessons.length === 0) {
      return res.status(200).json({ message: "‚ÑπÔ∏è –£—Ä–æ–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", lessons: [] });
    }

    const lessonsWithMentor = await Course.findById(req.params.id).populate("lessons.mentor", "fullName");
    res.json({ message: "‚úÖ –£—Ä–æ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!", lessons: lessonsWithMentor.lessons });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤:", error);
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
  }
});


// üìå 1Ô∏è‚É£1Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –∫—É—Ä—Å (–º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)
router.post("/:id/students", async (req, res) => {
  try {
    const { studentIds } = req.body; // ‚úÖ –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    const courseId = req.params.id;

    if (!studentIds || !Array.isArray(studentIds) || studentIds.length === 0) {
      return res.status(400).json({ message: "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞!" });
    }

    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({ message: "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
    const newStudents = studentIds.filter(id => !course.students.includes(id));
    course.students.push(...newStudents);
    
    await course.save();
    res.json({ message: "‚úÖ –°—Ç—É–¥–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫—É—Ä—Å!", students: course.students });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:", error);
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
  }
});

// üìå 1Ô∏è‚É£2Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ –∫—É—Ä—Å–∞ (–≥—Ä—É–ø–ø–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
router.delete("/:id/students", async (req, res) => {
  try {
    const { studentIds } = req.body;
    const courseId = req.params.id;

    if (!studentIds || !Array.isArray(studentIds) || studentIds.length === 0) {
      return res.status(400).json({ message: "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã —Å—Ç—É–¥–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!" });
    }

    const course = await Course.findByIdAndUpdate(
      courseId,
      { $pull: { students: { $in: studentIds } } },
      { new: true }
    ).populate("students", "fullName phone email");

    if (!course) {
      return res.status(404).json({ message: "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    res.json({ message: "‚úÖ –°—Ç—É–¥–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", students: course.students });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:", error);
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
  }
});


// üìå 1Ô∏è‚É£3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫—É—Ä—Å–∞
router.get("/:id/students", async (req, res) => {
  try {
    const course = await Course.findById(req.params.id).populate("students", "fullName phone email");
    
    if (!course) {
      return res.status(404).json({ message: "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    res.json(course.students);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫—É—Ä—Å–∞:", error);
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
  }
});


/// üìå 1Ô∏è‚É£4Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –∫—É—Ä—Å
router.post("/:id/materials", upload.single("file"), async (req, res) => {
  try {
    const courseId = req.params.id;
    const { title, fileType, fileUrl } = req.body;

    if (!title) {
      return res.status(400).json({ message: "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!" });
    }

    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({ message: "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    // ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª ‚Äî –±–µ—Ä–µ–º –∏–∑ `req.file`)
    const newMaterial = {
      title,
      fileName: req.file ? req.file.originalname : title, // –ï—Å–ª–∏ —Ñ–∞–π–ª, –±–µ—Ä–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è
      fileUrl: req.file ? `uploads/${req.file.filename}` : fileUrl,
      fileType: req.file ? "file" : "link"
    };

    course.materials.push(newMaterial);
    await course.save();

    res.json({ message: "‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", materials: course.materials });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", error);
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞!" });
  }
});

// üìå 1Ô∏è‚É£5Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑ –∫—É—Ä—Å–∞
router.delete("/:id/materials/:materialId", async (req, res) => {
  try {
    const { id, materialId } = req.params;

    const course = await Course.findById(id);
    if (!course) {
      return res.status(404).json({ message: "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    const materialIndex = course.materials.findIndex(material => material._id.toString() === materialId);
    if (materialIndex === -1) {
      return res.status(404).json({ message: "‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    course.materials.splice(materialIndex, 1);
    await course.save();

    res.json({ message: "‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!", materials: course.materials });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", error);
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞!" });
  }
});

// üìå 1Ô∏è‚É£6Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫—É—Ä—Å–∞
router.get("/:id/materials", async (req, res) => {
  try {
    const course = await Course.findById(req.params.id);
    if (!course) {
      return res.status(404).json({ message: "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    res.json(course.materials);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", error);
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!" });
  }
});


// üìå 1Ô∏è‚É£7Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤—É–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç
router.get("/student/:studentId", async (req, res) => {
  try {
    const studentId = req.params.studentId;

    // –ù–∞—Ö–æ–¥–∏–º –∫—É—Ä—Å—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —ç—Ç–æ—Ç —Å—Ç—É–¥–µ–Ω—Ç –∑–∞–ø–∏—Å–∞–Ω
    const courses = await Course.find({ students: studentId }).populate("mentor", "fullName");

    res.json(courses);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞:", error);
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
  }
});


// üìå 18 API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —É—Ä–æ–∫–∞
router.get("/:courseId/lessons/:lessonId", async (req, res) => {
  try {
    const { courseId, lessonId } = req.params;

    const course = await Course.findById(courseId).populate("lessons.mentor", "fullName");
    if (!course) return res.status(404).json({ message: "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });

    const lesson = course.lessons.find(lesson => lesson._id.toString() === lessonId);
    if (!lesson) return res.status(404).json({ message: "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!" });

    res.json(lesson);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:", error);
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
  }
});


// üìå 19 API –¥–ª—è –ª–∞–π–∫–æ–≤ –∫ —É—Ä–æ–∫—É
router.post("/:courseId/lessons/:lessonId/like", async (req, res) => {
  try {
    const { courseId, lessonId } = req.params;
    const { userId } = req.body;

    const course = await Course.findById(courseId);
    if (!course) return res.status(404).json({ message: "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });

    const lessonIndex = course.lessons.findIndex(lesson => lesson._id.toString() === lessonId);
    if (lessonIndex === -1) return res.status(404).json({ message: "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!" });

    let lesson = course.lessons[lessonIndex];

    if (!lesson.likes) lesson.likes = []; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ª–∞–π–∫–æ–≤

    if (lesson.likes.includes(userId)) {
      // –£–±–∏—Ä–∞–µ–º –ª–∞–π–∫
      lesson.likes = lesson.likes.filter(id => id.toString() !== userId);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
      lesson.likes.push(userId);
    }

    await course.save();
    res.json({ message: "‚úÖ –õ–∞–π–∫ –æ–±–Ω–æ–≤–ª—ë–Ω!", likes: lesson.likes });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ —É—Ä–æ–∫–∞:", error);
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
  }
});


// üìå 20 API –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É—Ä–æ–∫–∞
router.get("/:courseId/lessons/:lessonId/materials/:materialId", async (req, res) => {
  try {
    const { courseId, lessonId, materialId } = req.params;

    const course = await Course.findById(courseId);
    if (!course) return res.status(404).json({ message: "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });

    const lesson = course.lessons.find(lesson => lesson._id.toString() === lessonId);
    if (!lesson) return res.status(404).json({ message: "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!" });

    const material = lesson.materials.find(mat => mat._id.toString() === materialId);
    if (!material) return res.status(404).json({ message: "‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!" });

    res.json({ fileUrl: material.fileUrl });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", error);
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
  }
});


// üìå 21 API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞
router.put("/:courseId/lessons/:lessonId", async (req, res) => {
  try {
    const { courseId, lessonId } = req.params;
    const { title, description, date, duration, conferenceLink, banner } = req.body;

    const course = await Course.findById(courseId);
    if (!course) return res.status(404).json({ message: "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });

    const lessonIndex = course.lessons.findIndex(lesson => lesson._id.toString() === lessonId);
    if (lessonIndex === -1) return res.status(404).json({ message: "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!" });

    let lesson = course.lessons[lessonIndex];

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    lesson.title = title || lesson.title;
    lesson.description = description || lesson.description;
    lesson.date = date || lesson.date;
    lesson.duration = duration || lesson.duration;
    lesson.conferenceLink = conferenceLink || lesson.conferenceLink;
    lesson.banner = banner || lesson.banner;

    await course.save();
    res.json({ message: "‚úÖ –£—Ä–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω!", lesson });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:", error);
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
  }
});


module.exports = router;
