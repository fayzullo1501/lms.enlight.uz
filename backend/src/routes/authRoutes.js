import express from "express";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import mongoose from "mongoose";
import dotenv from "dotenv";

dotenv.config();

const router = express.Router();

const User = mongoose.model("User", new mongoose.Schema({
  fullName: String,
  role: String,
  phone: String,
  login: { type: String, unique: true },
  email: { type: String, unique: true },
  password: String, // üî• –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É, –Ω–æ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ö–µ—à–∏—Ä—É–µ–º
  passport: { series: String, number: String }
}));

// üî• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è
router.post("/register", async (req, res) => {
  const { login, password, fullName, role, phone, email, passportSeries, passportNumber } = req.body;

  try {
    const existingUser = await User.findOne({ login });
    if (existingUser) {
      return res.status(400).json({ message: "–≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç" });
    }

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    const newUser = new User({
      login,
      password: hashedPassword,
      fullName,
      role,
      phone,
      email,
      passport: { series: passportSeries, number: passportNumber },
    });

    await newUser.save();

    // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    res.status(201).json({ 
      message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", 
      user: {
        id: newUser._id,
        fullName: newUser.fullName,
        role: newUser.role,
        phone: newUser.phone,
        login: newUser.login,
        email: newUser.email,
        passport: newUser.passport,
        createdAt: newUser.createdAt
      } 
    });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" });
  }
});


// üî• –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post("/login", async (req, res) => {
  const { login, password } = req.body;
  console.log("–ü–æ–ª—É—á–µ–Ω –ª–æ–≥–∏–Ω:", login);

  try {
    const user = await User.findOne({ $or: [{ login }, { email: login }] });
    console.log("–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", user);

    if (!user) {
      console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:", isMatch);

    if (!isMatch) {
      return res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
    }

    const token = jwt.sign({ userId: user._id, role: user.role }, process.env.JWT_SECRET, { expiresIn: "7d" });

    res.json({ token, user });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

export default router;
