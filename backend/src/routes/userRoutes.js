const express = require("express");
const bcrypt = require("bcryptjs");
const multer = require("multer");
const User = require("../models/User");

const router = express.Router();

// üìå 1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ `multer` –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "uploads/"); // üìÇ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫–µ uploads
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}_${file.originalname}`); // ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
  },
});
const upload = multer({ storage });

// üìå 2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.get("/", async (req, res) => {
  try {
    const users = await User.find().select("-password"); // ‚úÖ –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª–∏
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!", error });
  }
});

// üìå 3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
router.get("/:id", async (req, res) => {
  try {
    const user = await User.findById(req.params.id).select("-password");
    if (!user) return res.status(404).json({ message: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });

    res.json(user);
  } catch (error) {
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", error });
  }
});

// üìå 4Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–æ—Ç–æ)
router.post("/", upload.single("photo"), async (req, res) => {
  try {
    const { fullName, role, phone, login, password, email, passport } = req.body;

    if (!fullName || !role || !login || !password) {
      return res.status(400).json({ message: "‚ùå –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –§–ò–û, —Ä–æ–ª—å, –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å!" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = new User({
      fullName,
      role,
      phone,
      login,
      password: hashedPassword,
      email,
      passport: passport ? JSON.parse(passport) : { series: "", number: "" },
      photo: req.file ? `uploads/${req.file.filename}` : "uploads/default.png", // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    });

    await newUser.save();
    const savedUser = await User.findById(newUser._id).select("-password");

    res.status(201).json({
      message: "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
      user: savedUser
    });
  } catch (error) {
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", error });
  }
});

// üìå 5Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ñ–æ—Ç–æ)
router.put("/:id", upload.single("photo"), async (req, res) => {
  try {
    const { fullName, role, phone, login, email, passport } = req.body;
    const userId = req.params.id;

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    user.fullName = fullName || user.fullName;
    user.role = role || user.role;
    user.phone = phone || user.phone;
    user.login = login || user.login;
    user.email = email || user.email;
    user.passport = passport ? JSON.parse(passport) : user.passport;

    if (req.file) {
      user.photo = `uploads/${req.file.filename}`; // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ
    }

    await user.save();
    const updatedUser = await User.findById(userId).select("-password");

    res.json({ message: "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", user: updatedUser });
  } catch (error) {
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", error });
  }
});

// üìå 5Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ê–¥–º–∏–Ω)
router.delete("/:id", async (req, res) => {
  try {
    const userId = req.params.id;

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    await User.findByIdAndDelete(userId);
    res.json({ message: "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!" });
  } catch (error) {
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", error });
  }
});

// üìå 6Ô∏è‚É£ –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.delete("/", async (req, res) => {
  try {
    const { userIds } = req.body;

    if (!userIds || !Array.isArray(userIds) || userIds.length === 0) {
      return res.status(400).json({ message: "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!" });
    }

    await User.deleteMany({ _id: { $in: userIds } });

    res.json({ message: `‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userIds.length}` });
  } catch (error) {
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!", error });
  }
});

module.exports = router;
