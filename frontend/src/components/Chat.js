import React, { useEffect, useState } from "react";
import { io } from "socket.io-client";
import axios from "axios";

const socket = io("http://localhost:5001"); // ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É

const Chat = ({ courseId, userId }) => {
  const [messages, setMessages] = useState([]); // –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
  const [newMessage, setNewMessage] = useState(""); // –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

  useEffect(() => {
    // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const fetchMessages = async () => {
      try {
        const { data } = await axios.get(`http://localhost:5001/api/chat/${courseId}/messages`);
        setMessages(data);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
      }
    };
    fetchMessages();

    // üìå –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on(`chat:${courseId}`, (message) => {
      console.log("üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message);
      setMessages((prev) => [...prev, message]);
    });

    return () => {
      socket.off(`chat:${courseId}`);
    };
  }, [courseId]);

  // üìå –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = async () => {
    if (!newMessage.trim()) return;

    const messageData = {
      courseId,
      sender: userId,
      message: newMessage,
    };

    try {
      // üìå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ API
      await axios.post(`http://localhost:5001/api/chat/${courseId}/messages`, messageData);
      
      // üìå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ `Socket.io`
      socket.emit("sendMessage", messageData);

      setNewMessage(""); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }
  };

  return (
    <div className="chat-container">
      <h2>–ß–∞—Ç –∫—É—Ä—Å–∞</h2>
      <div className="chat-messages">
        {messages.map((msg, index) => (
          <div key={index} className={`message ${msg.sender === userId ? "sent" : "received"}`}>
            <strong>{msg.sender === userId ? "–í—ã" : msg.sender.fullName}:</strong> {msg.message}
          </div>
        ))}
      </div>
      <div className="chat-input">
        <input
          type="text"
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
        />
        <button onClick={sendMessage}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      </div>
    </div>
  );
};

export default Chat;
